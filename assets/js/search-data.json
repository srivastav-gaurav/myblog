{
  
    
        "post0": {
            "title": "Blog 1",
            "content": "You gotta be Hungry. Hungry to code. Hungry to sit with a computer for hours and figure out how to fix that terminal error. And eventually, you will be hungry (no pun intended). Be shameless and audacious to ask the stupidest thing on the internet. Now don’t think that I am not being serious. I have asked questions like what’s the difference between array and list and couldn’t answer. Sometimes you’ll read blogs to understand what goes behind your code. What does the interpreter do? You’ll get stuck on as small a problem as one can have. But do not get demotivated for one second. Because you sure one day write this “I solved as big a problem as one can be given too”. . I am a mechanical engineer who is steering his career to come under the umbrella of Artificial Intelligence. The field has a lot to offer, and will be the most sought after area of work for years to come. I hope what I am going to tell you will help you. But make no mistake, even my knowledge is limited. I say what I believe is true and it is based on my experience. And your experience of everything will be different. Make your own decision. Take help not commands. So, let’s kick this off with a little info about my journey so far. . As I said already, I’m a mechanical engineer, who graduated in 2018. I tried preparing for government jobs but that didn’t come to fruition.And nearly towards the end of 2019, I had taken the first step towards becoming an ML practitioner i.e. a python course. Come 2020, covid. My preparation stopped many times. And all year was a waste. Didn’t do one good project. Also, not a lot of coding went in 2020. Biggest regret. But the following year brought changes. Tides were in different directions and by the time this blog goes up, I would have completed two complete projects and a lot more coding practice. I am currently half way through my fast.ai course. It’s super amazing. More on this later. . I started my journey by researching a lot about AI. Media and people always talk about how it’s changing the world and how fascinating it is and how sexy and how one can complete a course and be a data scientist or ML/AI scientist in just a matter of few months. What all have failed to mention is how hard it is, to actually do it and land the first job. Because you can develop the skills easily, you can learn tools too, may even remember all about every algorithm and their fixtures but that is not enough to get you a job. This is just a baggage check stage in the real world. . The real world is much more pain in the… as you can imagine, because you have to showcase your skills, like ‘here I have used my knowledge and solved this problem’. Or came on top of the leaderboard. One would argue, now it’s enough to land a job. But uh h !, because a lot of people would be doing this already or job’s requirement will still be somehow unmet. . You will realize ‘oh there is a metal detector too’. I have to do more’. Now step three is to let the world know of your skill, your work, and your project. And you will realize, what you have done is not that good to show off to the world. What would they think once they see my project? . And you would again start making people worthy projects and for that you’ll study more. And may lose motivation and code less. This is where many have to tackle that procrastination monster. He’s got his foot on the gas. I took a year to kill it. . Sharing your works via LinkedIn, GitHub, Youtube, Medium or any other community page you follow is where most agree that this is enough. Now just wait and continue applying for a job and hope to crack the skull of the interviewer. But who knows what will happen next year. Maybe by the time you read about it, this is yet again not enough. Then you’ll have to go to the next stage of check-in, where they’ll frisk you… . Of course I’m joking. This will not come. Because when you don’t get a job even after this, then clearly data science or machine learning domain job’s are no longer the sexiest. Not so in demand. Something else might have taken its place, a new growing technology in the market. Maybe AR - VR - XR. . If you have decided this is where you wanna make a living out of it and are just beginning to start preparation, this is what I think is the right way: . Beware that there are many job domains available who prepares for data science or machine learning. If you have not decided what domain of work you are gonna do then read the job description for all profiles and get an idea from there. (Or a simple google search might do the trick as well). . | Go to a job site. It could be any. LinkedIn, Glassdoor, Indeed, Monster etc. Search for a job profile of your liking. Read as many job descriptions as you can at first and get an idea of what they are looking for in an applicant. These may include tools, skills, methodologies one can apply and many more. And make a list and bold the frequent ones out. Understand those things and choose smartly. . | Throughout your preparation time, keep comparing that list with the job descriptions. You can do this once a month. Look for sudden demand for some new skill. What kind of tools do most companies use? This list not only will help you prepare necessary things for the profile but also keeps you in check. As the most common skills are now basic skills for this job and as important as they are, may not be a differentiator for you at the time of job applications. A differentiator is something which is special about you that will make you different from others. You can use this in interviews too. . | Now, you can start with preparation. Keep this in mind, not only you are going to learn exciting things in next few months but you will also learn boring stuff too and you have to take care of that mindset which didn’t work last time. . | . (# - question may be asked by the interviewer) . I’ll name a few things that you have to go through if you are not from a typical computer science background. Do an introductory course of computer science. CS50’s Introduction to CS is best. Another one you should do is MIT’s Introduction to CS with python. # . | Data Structure and algorithm. Many leave both the topic and jump straight over to learning python. But realize later and return back. You don’t have to do every type of data structure. But try. And start coding. Find any coding website like Codewars and get on with it. # . | Learn python. (my favourite was Corey Schafer’s youtube channel for python) . | . Wait no longer to code. The moment you get the logic of any programming language, you are good to go. You may say, well Gaurav, I don’t know what library or module I should use. Well ask google when you get stuck. Whatever problem or situation you get stuck on, first ask google. Ask it to explain how to do that in basic (Language: Python, C, or R, etc). There will be plenty of answers on stackoverflow. Normally at this starting stage, you won’t have a situation which will require you actually posting a question. There will be answers available anyway. . Basic math which include linear algebra, matrix, calculus. For this watch 3blue1brown videos. Or Khan academy. Learn what is required. . | Now you can start with python libraries. Numpy, Pandas, Matplotlib, Seaborn, Scipy. And modules like datetime, os, sys, request, math, random, array, csv, regular expression, json, itertools. (don’t get afraid, these are easy things. Also, people forget codes all the time. Most go-on to become a data scientist without remembering basic codes.) # . | . Preprocessing steps, which is the most important step most data scientists agree on. What does I mean exactly, find on your own. There are many ways to do this step. What I will tell is that there are many tools for that. It depends on the type of data, job and the company on which tool you’ll end up using. It also depends on the number of data. Tools I will recommend you should know how to use. MS Excel / Spreadsheet, SQL, No-Sql. ## . | . BI tools for visualization. Tableau or Power BI. # . | . Coursera Machine Learning by Andrew Ng or Udacity’s Machine learning course. And get a handbook. Search on your own. You will find pdf’s of almost every book out there. My suggestion is to read a few chapters before buying. Just to be sure that you easily understand the author. ## . | Rest of the information and things will be delivered in the course and book. Trust that course and the book. Don’t go looking for another course or book before finishing it. It will be tempting to try other book or course, but brace yourself. . | Before you come to deep learning, make sure you have done all that. Whatever was asked by the course teacher and the author of the book. Don’t be afraid of mistakes. Try rewriting the same codes present in the book or course. Try explaining yourself the same thing by writing or recording your voice. If you can’t explain it simply, then you don’t understand it well enough. . | Deep learning resource: Fast.ai &amp; Deeplearning.ai. And at appropriate times, watch deepmind x ucl deep learning lecture series. Don’t go anywhere else. I like Fastai because none have tried the top to bottom approach. After finishing it, I have decided that I will do at least one conventional bottom to top approach to reconnect every dots. But I don’t know what the end has for me after fastai. ### . | By this time, you will already be making models and doing projects. Deploy your model. Use voila to do that. Upload your codes with all the markdowns, requirement.txt, readme and necessary files to github. Make a digital portfolio and start writing your resume. . | . You may be asked sometimes in interview questions related to statistics and probability. There are many good resources available. Still, I’ll Tell you where I learned. Youtube’s channel freecodecamp and seeing theory for probability. . | . Cloud service. AWS/ GCP/ AZURE. Pick your choice. (use least expensive) # . | .",
            "url": "https://srivastav-gaurav.github.io/myblog/2021/09/12/Blog-1.html",
            "relUrl": "/2021/09/12/Blog-1.html",
            "date": " • Sep 12, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://srivastav-gaurav.github.io/myblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://srivastav-gaurav.github.io/myblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Versatile individual with experience in collecting, transforming and organizing data for analysis to help make informed decisions. Excellent understanding and proficiency of platforms for effective data analyses, including SQL, Excel spreadsheet, tableau and R. Strong communication and organizational and analytical skills. Recently completed the Google Data Analytics Certificate -a rigorous and hands-on program that covers the entire scope of data analysis process. Also, knowledge of machine learning algorithms and proficiency in Python programming and common libraries. Currently doing fastai course by Jermy Howard which is a deep learning course with fastai library and pytorch. . Prior to that, I graduated from A.P.J. Abdul Kalam Technical University as a Mechanical Engineer. During my graduation, I have built many projects, led different jobs and had different roles like production engineer to market research. Few of those projects included “an electric car making”, “a prototype shrinking chassis”, “unconventional traffic solution paper with multi-utility-vehicle concept car”. . Going from here with all the practices I gained from data analysis, I am making good use of it towards becoming a data scientist and ml/dl practitioner. During the course of fastai, Jeremy Howard and Rachel Thomas had made great points as to why one should blog. After listening to them and reading Rachel’s blog on Why you (yes, you) should blog has convinced me to make my own. Hopefully I will contribute my bits to the community. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://srivastav-gaurav.github.io/myblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://srivastav-gaurav.github.io/myblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}